# -*- coding: utf-8 -*-
"""HW01_group6_adult3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s1qlW09UFdFXQPqjlWXp-fQYsuuYdn5G

# 資料前處理
"""

#匯入套件
import pandas as pd
import numpy as np

#讀取資料
adult_train_data = pd.read_csv('drive/My Drive/MachineLearning/Homework01/adult_data.csv')
adult_test_data = pd.read_csv('drive/My Drive/MachineLearning/Homework01/adult_test.csv')

adult_test_data.columns

#刪除fnlgwt列
adult_train_data.drop('fnlwgt', axis=1, inplace=True)
adult_test_data.drop('fnlwgt', axis=1, inplace=True)

#刪除train空值

#workclass
tmp = adult_train_data['workclass']
tmp[tmp == '?'] = np.NaN
adult_train_data['workclass'] = tmp

#occupation
tmp = adult_train_data['occupation']
tmp[tmp == '?'] = np.NaN
adult_train_data['occupation'] = tmp

#native-country
tmp = adult_train_data['native-country']
tmp[tmp == '?'] = np.NaN
adult_train_data['native-country'] = tmp

adult_train_data.dropna(inplace=True, how='any')
adult_train_data

#刪除test空值

#workclass
tmp = adult_test_data['workclass']
tmp[tmp == '?'] = np.NaN
adult_test_data['workclass'] = tmp

#occupation
tmp = adult_test_data['occupation']
tmp[tmp == '?'] = np.NaN
adult_test_data['occupation'] = tmp

#native-country
tmp = adult_test_data['native-country']
tmp[tmp == '?'] = np.NaN
adult_test_data['native-country'] = tmp

adult_test_data.dropna(inplace=True, how='any')
adult_test_data

#train資料正規化

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()

adult_train_data['workclass'] = labelencoder.fit_transform(adult_train_data['workclass'])
adult_train_data['education'] = labelencoder.fit_transform(adult_train_data['education'])
adult_train_data['marital-status'] = labelencoder.fit_transform(adult_train_data['marital-status'])
adult_train_data['occupation'] = labelencoder.fit_transform(adult_train_data['occupation'])
adult_train_data['relationship'] = labelencoder.fit_transform(adult_train_data['relationship'])
adult_train_data['race'] = labelencoder.fit_transform(adult_train_data['race'])
adult_train_data['sex'] = labelencoder.fit_transform(adult_train_data['sex'])
adult_train_data['native-country'] = labelencoder.fit_transform(adult_train_data['native-country'])
adult_train_data['listing-of-attributes'] = labelencoder.fit_transform(adult_train_data['listing-of-attributes'])

adult_train_data

#test資料正規化

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()

adult_test_data['workclass'] = labelencoder.fit_transform(adult_test_data['workclass'])
adult_test_data['education'] = labelencoder.fit_transform(adult_test_data['education'])
adult_test_data['marital-status'] = labelencoder.fit_transform(adult_test_data['marital-status'])
adult_test_data['occupation'] = labelencoder.fit_transform(adult_test_data['occupation'])
adult_test_data['relationship'] = labelencoder.fit_transform(adult_test_data['relationship'])
adult_test_data['race'] = labelencoder.fit_transform(adult_test_data['race'])
adult_test_data['sex'] = labelencoder.fit_transform(adult_test_data['sex'])
adult_test_data['native-country'] = labelencoder.fit_transform(adult_test_data['native-country'])
adult_test_data['listing-of-attributes'] = labelencoder.fit_transform(adult_test_data['listing-of-attributes'])

adult_test_data

#將訓練及測試資料分成data和labels
from tensorflow.keras.utils import to_categorical

trainData = adult_train_data.drop(labels=['education'],axis=1)
trainLabels = to_categorical(adult_train_data['education'])

testData = adult_test_data.drop(labels=['education'],axis=1)
testLabels = to_categorical(adult_test_data['education'])

#檢視訓練集測試資料大小
print('訓練資料: ',trainData.shape)
print('測試資料: ',testData.shape)

"""# 模型設計"""

#設計模型

from keras.models import Sequential
from keras.layers import Activation
from keras.layers import Dense
from keras.optimizers import Adam
from keras.layers import Dropout

#建立簡單的線性執行的模型
model = Sequential()

#新增輸入層
model.add(Dense(8, Activation('relu'), input_dim=trainData.shape[-1]))

#新增隱藏層
model.add(Dense(16, Activation('relu')))

#新增輸出層
model.add(Dense(16, Activation('sigmoid')))

model.summary()

"""## 學習率=0.01



"""

#編譯(學習率=0.01)
adamfirst = Adam(learning_rate=0.01)
model.compile(optimizer=adamfirst, loss='binary_crossentropy', metrics=['accuracy'])

#訓練模型(學習率=0.01)
history = model.fit(trainData, trainLabels, epochs=8, batch_size=16, verbose=1, shuffle=True, validation_split=0.1)

#模型驗證(學習率=0.01)
_, accuracy = model.evaluate(testData, testLabels)
print('Accuracy: %.2f' % (accuracy*100))

#將繪製成圖(學習率=0.01)
import matplotlib.pyplot as plt

history_dict = history.history
history_dict.keys()
acc = history_dict['accuracy']
val_acc = history_dict['val_accuracy']
loss = history_dict['loss']
val_loss = history_dict['val_loss']
epochs_ = range(1,len(acc)+1)

plt.plot(epochs_ , acc , label='train accuracy')
plt.plot(epochs_ , val_acc , label = 'val accuracy')
plt.title('train and val acc')
plt.xlabel('epochs')
plt.ylabel('acc')
plt.legend()
plt.show()

#預測測試資料的labels(學習率=0.01)
testPred = np.argmax(model.predict(testData), axis=1)

#算出混淆矩陣(學習率=0.01)
from sklearn.metrics import confusion_matrix, classification_report

testLabels_class = np.argmax(testLabels, axis=1)

print(classification_report(testLabels_class, testPred))
#print(confusion_matrix(testLabels_class, testPred))

"""## 學習率=0.005"""

#編譯(學習率=0.005)
adamfirst = Adam(learning_rate=0.005)
model.compile(optimizer=adamfirst, loss='binary_crossentropy', metrics=['accuracy'])

#訓練模型(學習率=0.005)
history = model.fit(trainData, trainLabels, epochs=8, batch_size=16, verbose=1, shuffle=True, validation_split=0.1)

#模型驗證(學習率=0.005)
_, accuracy = model.evaluate(testData, testLabels)
print('Accuracy: %.2f' % (accuracy*100))

#預測測試資料的labels(學習率=0.005)
testPred = np.argmax(model.predict(testData), axis=1)

#算出混淆矩陣(學習率=0.005)
from sklearn.metrics import confusion_matrix, classification_report

testLabels_class = np.argmax(testLabels, axis=1)

print(classification_report(testLabels_class, testPred))

"""## 學習率=0.001"""

#編譯(學習率=0.001)
adamfirst = Adam(learning_rate=0.001)
model.compile(optimizer=adamfirst, loss='binary_crossentropy', metrics=['accuracy'])

#訓練模型(學習率=0.001)
history = model.fit(trainData, trainLabels, epochs=8, batch_size=16, verbose=1, shuffle=True, validation_split=0.1)

#模型驗證(學習率=0.001)
_, accuracy = model.evaluate(testData, testLabels)
print('Accuracy: %.2f' % (accuracy*100))

#預測測試資料的labels(學習率=0.001)
testPred = np.argmax(model.predict(testData), axis=1)

#算出混淆矩陣(學習率=0.001)
from sklearn.metrics import confusion_matrix, classification_report

testLabels_class = np.argmax(testLabels, axis=1)

print(classification_report(testLabels_class, testPred))

"""## 學習率=0.0005"""

#編譯(學習率=0.0005)
adamfirst = Adam(learning_rate=0.0005)
model.compile(optimizer=adamfirst, loss='binary_crossentropy', metrics=['accuracy'])

#訓練模型(學習率=0.0005)
history = model.fit(trainData, trainLabels, epochs=8, batch_size=16, verbose=1, shuffle=True, validation_split=0.1)

#模型驗證(學習率=0.0005)
_, accuracy = model.evaluate(testData, testLabels)
print('Accuracy: %.2f' % (accuracy*100))

#預測測試資料的labels(學習率=0.0005)
testPred = np.argmax(model.predict(testData), axis=1)

#算出混淆矩陣(學習率=0.0005)
from sklearn.metrics import confusion_matrix, classification_report

testLabels_class = np.argmax(testLabels, axis=1)

print(classification_report(testLabels_class, testPred))